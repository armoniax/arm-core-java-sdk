buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    //Remove 'com.jfrog.artifactory' plugin if you are not using Artifactory
//    id 'com.jfrog.artifactory' version '4.17.2'
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        //Remove maven{} block if you are not using Artifactory, otherwise define your own values in the gradle.properties file
//        maven {
//            credentials{
//                username artifactory_username
//                password artifactory_password
//            }
//            url artifactory_path_android_libraries
//        }
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation fileTree(include: ['*.jar', "*.dylib", "*.so"], dir: 'libs')
    api 'org.bouncycastle:bcprov-jdk15on:1.61'
    testImplementation 'com.google.code.gson:gson:2.8.5'
    testImplementation files('/Users/bruce/workspace/java/amax4j/build/libs/amax4j.jar')
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    implementation group: 'org.json', name: 'json', version: '20200518'
    implementation 'org.jetbrains:annotations:17.0.0'
    compileOnly files('/Users/bruce/workspace/java/amax4j/build/libs/amax4j.jar')
    testCompileOnly files('/Users/bruce/workspace/java/amax4j/build/libs/amax4j.jar')
}

jar {
    archiveFileName = 'amax-serialization-provider.jar'
    dependsOn 'copyNativeLibrary'
    // Copy lib file before jar is created
    from('amaxabi/build/lib/main/release') {
        include '**/*.so'
        include '**/*.dylib'
        into('amaxabi/build/lib/main/release')
    }
}

task copyNativeLibrary(type: Copy) {
    dependsOn ':amaxabi:linkRelease'
    // Copy lib to /resources so tests can run within project (outside of gradle task)
    from ('amaxabi/build/lib/main/release') {
        include '**/*.so'
        include '**/*.dylib'
    }
    into 'src/main/resources/amaxabi/build/lib/main/release'
}

test {
    dependsOn 'copyNativeLibrary'
    systemProperty "java.library.path", file("${project(":amaxabi").buildDir}/lib/main/release").absolutePath
    testLogging {
        events "passed", "skipped", "failed"
    }
}

//task gitSubmodulesUpdate {
//    exec {
//        commandLine 'git', 'submodule', 'update', '--init', '--recursive'
//    }
//}

task deleteCopiedNativeLibrary(type: Delete) {
    delete fileTree(include: ["*.dylib", "*.so"], dir: 'src/main/resources/amaxabi/build/lib/main/release')
}

clean.dependsOn 'deleteCopiedNativeLibrary'

def libraryGroupId = 'io.armoniax'
def libraryArtifactId = 'amax-serialization-provider'
def libraryVersion = '1.0.0'

task sourcesJar(type: Jar, dependsOn: classes){
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc){
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        jar(MavenPublication) {
            from components.java

            artifact sourcesJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            groupId libraryGroupId
            version libraryVersion
            artifactId libraryArtifactId

            artifact("$buildDir/libs/${artifactId}.jar")

            pom {
                name = 'EOSIO SDK for Java: ABIEOS Serialization Provider'
                description = 'ABIEOS Serialization Provider is intended to be used in conjunction with EOSIO SDK for Java as a provider plugin.'
                url = 'https://github.com/EOSIO/eosio-java-abieos-serialization-provider/'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/EOSIO/eosio-java-abieos-serialization-provider/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'block.one'
                        name = 'Block One'
                        email = 'dev@block.one'
                    }
                }
            }
        }
    }
}
//
////Remove artifactory{} block if you are not using Artifactory
//artifactory {
//    contextUrl = artifactory_contextURL
//    publish {
//        repository {
//            repoKey = artifactory_repo
//
//            username = artifactory_username
//            password = artifactory_password
//        }
//        defaults {
//            publications('jar')
//            publishArtifacts = true
//
//            properties = ['qa.level': 'basic', 'dev.team': 'core']
//            publishPom = true
//        }
//    }
//}
